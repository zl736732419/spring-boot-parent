<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
       default-lazy-init="true">

    <context:property-placeholder ignore-unresolvable="true" />

    <!--使用阿里的Druid作为数据源连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url">
            <value><![CDATA[${spring.datasource.druid.url}]]></value>
        </property>
        <property name="username">
            <value>${spring.datasource.druid.username}</value>
        </property>
        <property name="password">
            <value>${spring.datasource.druid.password}</value>
        </property>

        <!--配置扩展插件：监控统计-->
        <property name="filters" value="${spring.datasource.druid.filters}"/>
        <!--最大连接池数量-->
        <property name="maxActive" value="${spring.datasource.druid.maxActive}"/>
        <!--初始化时建立物理连接的个数-->
        <property name="initialSize" value="${spring.datasource.druid.initialSize}"/>
        <!--获取连接时最大等待时间-->
        <property name="maxWait" value="${spring.datasource.druid.maxWait}"/>
        <!--最小连接池数量-->
        <property name="minIdle" value="${spring.datasource.druid.minIdle}"/>

        <!--如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。-->
        <property name="timeBetweenEvictionRunsMillis" value="${spring.datasource.druid.timeBetweenEvictionRunsMillis}"/>
        <!--连接保持空闲而不被驱逐的最长时间-->
        <property name="minEvictableIdleTimeMillis" value="${spring.datasource.druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${spring.datasource.druid.validationQuery}"/>
        <!--申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="${spring.datasource.druid.testWhileIdle}"/>
        <!--申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。-->
        <property name="testOnBorrow" value="${spring.datasource.druid.testOnBorrow}"/>
        <!--归还连接时执行validationQuery检测连接是否有效，配置true会降低性能。-->
        <property name="testOnReturn" value="${spring.datasource.druid.testOnReturn}"/>
    </bean>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="com.zheng.springboot.domain"/>
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"/>
    </bean>
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zheng.springboot.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="annotationClass" value="com.zheng.springboot.annotations.MybatisMapper"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置事务特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRES_NEW"/>
            <tx:method name="save*" propagation="REQUIRES_NEW"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="execute*" propagation="REQUIRED"/>
            <tx:method name="clear*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true" />
    <!-- 配置哪些类的方法需要进行事务管理 -->
    <aop:config>
        <aop:pointcut id="pt" expression="execution(* com.zheng.springboot.service..*Impl.*(..))"/>
        <aop:advisor pointcut-ref="pt" advice-ref="txAdvice" />
    </aop:config>

</beans>